	__MipsR3000 NOTES__

 div $a0, $a1
 mfhi $a2 # remainder to $a2
 mflo $v0 # quotient to $v0

______________________________
int iterations = 10;
int i == 0;
int val = 17;
for(i = 0; i < 10; i++)
{
	val +=i;
}

this loop (C code) is writed in assembly in next text:
______________________________
.text
globl main
main:
	li $t0, 10 # number of iterations
	li $t1, 0 #t1 is our counter (i)
	li $t2, 17 #t2 holds value to modify
loop:
	beq $t1, $t0, end # if t1 == 10 end loop
	add $t1, $t2, $t1
	addi $t1, $t1, 1 # add 1 to t1
	j loop # jump back to the top
end:
	li $v0,10
	syscall
______________________________

.data
message :.asciiz "bonjour tout le monde.\n TP assembleur.\n"
.text
main :
jal affichermessage  
li $v0,10		# (end of execution service). Without this line the loop continue for infinity
syscall
affichermessage :
li $v0, 4
la $a0, message
syscall
jr $ra  # On function entry, ra holds the return address where our caller wants us to jump when we're done. (jump register unconditionally)

______________________________

Dropped off bottom means you hit the end of your code.
MARS handles program exits in two ways: 
Explicitly (by calling syscalls number 10 (exit w/o status) or 17 (exit w/ status)), 
Or implicitly (by reaching the end of the input assembly's .text section)
______________________________
